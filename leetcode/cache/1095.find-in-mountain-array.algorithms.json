{"id":1185,"fid":1095,"name":"Find in Mountain Array","slug":"find-in-mountain-array","link":"https://leetcode.com/problems/find-in-mountain-array/description/","percent":40.63688419328623,"level":"Hard","category":"algorithms","totalAC":"131.2K","totalSubmit":"322.9K","likes":3125,"dislikes":127,"desc":"<p><em>(This problem is an <strong>interactive problem</strong>.)</em></p>\n\n<p>You may recall that an array <code>arr</code> is a <strong>mountain array</strong> if and only if:</p>\n\n<ul>\n\t<li><code>arr.length &gt;= 3</code></li>\n\t<li>There exists some <code>i</code> with <code>0 &lt; i &lt; arr.length - 1</code> such that:\n\t<ul>\n\t\t<li><code>arr[0] &lt; arr[1] &lt; ... &lt; arr[i - 1] &lt; arr[i]</code></li>\n\t\t<li><code>arr[i] &gt; arr[i + 1] &gt; ... &gt; arr[arr.length - 1]</code></li>\n\t</ul>\n\t</li>\n</ul>\n\n<p>Given a mountain array <code>mountainArr</code>, return the <strong>minimum</strong> <code>index</code> such that <code>mountainArr.get(index) == target</code>. If such an <code>index</code> does not exist, return <code>-1</code>.</p>\n\n<p><strong>You cannot access the mountain array directly.</strong> You may only access the array using a <code>MountainArray</code> interface:</p>\n\n<ul>\n\t<li><code>MountainArray.get(k)</code> returns the element of the array at index <code>k</code> (0-indexed).</li>\n\t<li><code>MountainArray.length()</code> returns the length of the array.</li>\n</ul>\n\n<p>Submissions making more than <code>100</code> calls to <code>MountainArray.get</code> will be judged <em>Wrong Answer</em>. Also, any solutions that attempt to circumvent the judge will result in disqualification.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> array = [1,2,3,4,5,3,1], target = 3\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> 3 exists in the array, at index=2 and index=5. Return the minimum index, which is 2.</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> array = [0,1,2,4,2,1], target = 3\n<strong>Output:</strong> -1\n<strong>Explanation:</strong> 3 does not exist in <code>the array,</code> so we return -1.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>3 &lt;= mountain_arr.length() &lt;= 10<sup>4</sup></code></li>\n\t<li><code>0 &lt;= target &lt;= 10<sup>9</sup></code></li>\n\t<li><code>0 &lt;= mountain_arr.get(index) &lt;= 10<sup>9</sup></code></li>\n</ul>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"/**\n * // This is the MountainArray's API interface.\n * // You should not implement it, or speculate about its implementation\n * class MountainArray {\n *   public:\n *     int get(int index);\n *     int length();\n * };\n */\n\nclass Solution {\npublic:\n    int findInMountainArray(int target, MountainArray &mountainArr) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"/**\n * // This is MountainArray's API interface.\n * // You should not implement it, or speculate about its implementation\n * interface MountainArray {\n *     public int get(int index) {}\n *     public int length() {}\n * }\n */\n \nclass Solution {\n    public int findInMountainArray(int target, MountainArray mountainArr) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"# \"\"\"\n# This is MountainArray's API interface.\n# You should not implement it, or speculate about its implementation\n# \"\"\"\n#class MountainArray(object):\n#    def get(self, index):\n#        \"\"\"\n#        :type index: int\n#        :rtype int\n#        \"\"\"\n#\n#    def length(self):\n#        \"\"\"\n#        :rtype int\n#        \"\"\"\n\nclass Solution(object):\n    def findInMountainArray(self, target, mountain_arr):\n        \"\"\"\n        :type target: integer\n        :type mountain_arr: MountainArray\n        :rtype: integer\n        \"\"\"\n        "},{"value":"python3","text":"Python3","defaultCode":"# \"\"\"\n# This is MountainArray's API interface.\n# You should not implement it, or speculate about its implementation\n# \"\"\"\n#class MountainArray:\n#    def get(self, index: int) -> int:\n#    def length(self) -> int:\n\nclass Solution:\n    def findInMountainArray(self, target: int, mountain_arr: 'MountainArray') -> int:\n        "},{"value":"c","text":"C","defaultCode":"/**\n * *********************************************************************\n * // This is the MountainArray's API interface.\n * // You should not implement it, or speculate about its implementation\n * *********************************************************************\n *\n * int get(MountainArray *, int index);\n * int length(MountainArray *);\n */\n\nint findInMountainArray(int target, MountainArray* mountainArr) {\n\t\n}"},{"value":"csharp","text":"C#","defaultCode":"/**\n * // This is MountainArray's API interface.\n * // You should not implement it, or speculate about its implementation\n * class MountainArray {\n *     public int Get(int index) {}\n *     public int Length() {}\n * }\n */\n\nclass Solution {\n    public int FindInMountainArray(int target, MountainArray mountainArr) {\n        \n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * // This is the MountainArray's API interface.\n * // You should not implement it, or speculate about its implementation\n * function MountainArray() {\n *     @param {number} index\n *     @return {number}\n *     this.get = function(index) {\n *         ...\n *     };\n *\n *     @return {number}\n *     this.length = function() {\n *         ...\n *     };\n * };\n */\n\n/**\n * @param {number} target\n * @param {MountainArray} mountainArr\n * @return {number}\n */\nvar findInMountainArray = function(target, mountainArr) {\n    \n};"},{"value":"typescript","text":"TypeScript","defaultCode":"/**\n * // This is the MountainArray's API interface.\n * // You should not implement it, or speculate about its implementation\n * class Master {\n *      get(index: number): number {}\n *\n *      length(): number {}\n * }\n */\n\nfunction findInMountainArray(target: number, mountainArr: MountainArray) {\n\t\n};"},{"value":"php","text":"PHP","defaultCode":"/**\n * // This is MountainArray's API interface.\n * // You should not implement it, or speculate about its implementation\n * class MountainArray {\n *     function get($index) {}\n *     function length() {}\n * }\n */\n\nclass Solution {\n    /**\n     * @param Integer $target\n     * @param MountainArray $mountainArr\n     * @return Integer\n     */\n    function findInMountainArray($target, $mountainArr) {\n        \n    }\n}"},{"value":"swift","text":"Swift","defaultCode":"/**\n * // This is MountainArray's API interface.\n * // You should not implement it, or speculate about its implementation\n * interface MountainArray {\n *     public func get(_ index: Int) -> Int {}\n *     public func length() -> Int {}\n * }\n */\n\nclass Solution {\n    func findInMountainArray(_ target: Int, _ mountainArr: MountainArray) -> Int {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"/**\n * // This is MountainArray's API interface.\n * // You should not implement it, or speculate about its implementation\n * class MountainArray {\n *     fun get(index: Int): Int {}\n *     fun length(): Int {}\n * }\n */\n\nclass Solution {\n    fun findInMountainArray(target: Int, mountainArr: MountainArray): Int {\n        \n    }\n}"},{"value":"golang","text":"Go","defaultCode":"/**\n * // This is the MountainArray's API interface.\n * // You should not implement it, or speculate about its implementation\n * type MountainArray struct {\n * }\n *\n * func (this *MountainArray) get(index int) int {}\n * func (this *MountainArray) length() int {}\n */\n\nfunc findInMountainArray(target int, mountainArr *MountainArray) int {\n    \n}"},{"value":"ruby","text":"Ruby","defaultCode":"# This is MountainArray's API interface.\n# You should not implement it, or speculate about its implementation\n# class MountainArray\n#    def get(index):\n#       \n#    end\n#\n#    def length()\n#\t\t\n#\t end\n# end\n\n# @param {int} int\n# @param {MountainArray} mountain_arr\n# @return {int}\ndef findInMountainArray(target, mountain_arr)\n    \nend"},{"value":"scala","text":"Scala","defaultCode":"/**\n * // This is MountainArray's API interface.\n * // You should not implement it, or speculate about its implementation\n * class MountainArray {\n *     def get(index: Int): Int = {}\n *     def length(): Int = {}\n * }\n */\n\nobject Solution {\n    def findInMountainArray(value: Int, mountainArr: MountainArray): Int = {\n        \n\t}\n}"},{"value":"rust","text":"Rust","defaultCode":"/**\n * // This is the MountainArray's API interface.\n * // You should not implement it, or speculate about its implementation\n *  struct MountainArray;\n *  impl MountainArray {\n *     fn get(index:i32)->i32;\n *     fn length()->i32;\n * };\n */\n\nimpl Solution {\n    pub fn find_in_mountain_array(target: i32, mountain_arr: &MountainArray) -> i32 {\n        \n    }\n}"}],"testcase":"[1,2,3,4,5,3,1]\n3","testable":true,"templateMeta":{"name":"findInMountainArray","params":[{"name":"secret","type":"integer[]"},{"name":"target","type":"integer"}],"return":{"type":"integer"},"manual":true}}