{"id":6,"fid":6,"name":"Zigzag Conversion","slug":"zigzag-conversion","link":"https://leetcode.com/problems/zigzag-conversion/description/","percent":46.99292680180701,"level":"Medium","category":"algorithms","totalAC":"1.2M","totalSubmit":"2.6M","likes":7208,"dislikes":14071,"desc":"<p>The string <code>&quot;PAYPALISHIRING&quot;</code> is written in a zigzag pattern on a given number of rows like this: (you may want to display this pattern in a fixed font for better legibility)</p>\n\n<pre>\nP   A   H   N\nA P L S I I G\nY   I   R\n</pre>\n\n<p>And then read line by line: <code>&quot;PAHNAPLSIIGYIR&quot;</code></p>\n\n<p>Write the code that will take a string and make this conversion given a number of rows:</p>\n\n<pre>\nstring convert(string s, int numRows);\n</pre>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;PAYPALISHIRING&quot;, numRows = 3\n<strong>Output:</strong> &quot;PAHNAPLSIIGYIR&quot;\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;PAYPALISHIRING&quot;, numRows = 4\n<strong>Output:</strong> &quot;PINALSIGYAHRPI&quot;\n<strong>Explanation:</strong>\nP     I    N\nA   L S  I G\nY A   H R\nP     I\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;A&quot;, numRows = 1\n<strong>Output:</strong> &quot;A&quot;\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 1000</code></li>\n\t<li><code>s</code> consists of English letters (lower-case and upper-case), <code>&#39;,&#39;</code> and <code>&#39;.&#39;</code>.</li>\n\t<li><code>1 &lt;= numRows &lt;= 1000</code></li>\n</ul>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    string convert(string s, int numRows) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public String convert(String s, int numRows) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def convert(self, s, numRows):\n        \"\"\"\n        :type s: str\n        :type numRows: int\n        :rtype: str\n        \"\"\"\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def convert(self, s: str, numRows: int) -> str:\n        "},{"value":"c","text":"C","defaultCode":"char* convert(char* s, int numRows) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public string Convert(string s, int numRows) {\n        \n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {string} s\n * @param {number} numRows\n * @return {string}\n */\nvar convert = function(s, numRows) {\n    \n};"},{"value":"typescript","text":"TypeScript","defaultCode":"function convert(s: string, numRows: number): string {\n    \n};"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n\n    /**\n     * @param String $s\n     * @param Integer $numRows\n     * @return String\n     */\n    function convert($s, $numRows) {\n        \n    }\n}"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func convert(_ s: String, _ numRows: Int) -> String {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun convert(s: String, numRows: Int): String {\n        \n    }\n}"},{"value":"dart","text":"Dart","defaultCode":"class Solution {\n  String convert(String s, int numRows) {\n    \n  }\n}"},{"value":"golang","text":"Go","defaultCode":"func convert(s string, numRows int) string {\n    \n}"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {String} s\n# @param {Integer} num_rows\n# @return {String}\ndef convert(s, num_rows)\n    \nend"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def convert(s: String, numRows: Int): String = {\n        \n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn convert(s: String, num_rows: i32) -> String {\n        \n    }\n}"},{"value":"racket","text":"Racket","defaultCode":"(define/contract (convert s numRows)\n  (-> string? exact-integer? string?)\n  )"},{"value":"erlang","text":"Erlang","defaultCode":"-spec convert(S :: unicode:unicode_binary(), NumRows :: integer()) -> unicode:unicode_binary().\nconvert(S, NumRows) ->\n  ."},{"value":"elixir","text":"Elixir","defaultCode":"defmodule Solution do\n  @spec convert(s :: String.t, num_rows :: integer) :: String.t\n  def convert(s, num_rows) do\n    \n  end\nend"}],"testcase":"\"PAYPALISHIRING\"\n3","testable":true,"templateMeta":{"name":"convert","params":[{"name":"s","type":"string"},{"name":"numRows","type":"integer"}],"return":{"type":"string"}}}