{"id":1395,"fid":1266,"name":"Minimum Time Visiting All Points","slug":"minimum-time-visiting-all-points","link":"https://leetcode.com/problems/minimum-time-visiting-all-points/description/","percent":82.52794874082002,"level":"Easy","category":"algorithms","totalAC":"222.2K","totalSubmit":"269.2K","likes":2154,"dislikes":219,"desc":"<p>On a 2D plane, there are <code>n</code> points with integer coordinates <code>points[i] = [x<sub>i</sub>, y<sub>i</sub>]</code>. Return <em>the <strong>minimum time</strong> in seconds to visit all the points in the order given by </em><code>points</code>.</p>\n\n<p>You can move according to these rules:</p>\n\n<ul>\n\t<li>In <code>1</code> second, you can either:\n\n\t<ul>\n\t\t<li>move vertically by one&nbsp;unit,</li>\n\t\t<li>move horizontally by one unit, or</li>\n\t\t<li>move diagonally <code>sqrt(2)</code> units (in other words, move one unit vertically then one unit horizontally in <code>1</code> second).</li>\n\t</ul>\n\t</li>\n\t<li>You have to visit the points in the same order as they appear in the array.</li>\n\t<li>You are allowed to pass through points that appear later in the order, but these do not count as visits.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/11/14/1626_example_1.PNG\" style=\"width: 500px; height: 428px;\" />\n<pre>\n<strong>Input:</strong> points = [[1,1],[3,4],[-1,0]]\n<strong>Output:</strong> 7\n<strong>Explanation: </strong>One optimal path is <strong>[1,1]</strong> -&gt; [2,2] -&gt; [3,3] -&gt; <strong>[3,4] </strong>-&gt; [2,3] -&gt; [1,2] -&gt; [0,1] -&gt; <strong>[-1,0]</strong>   \nTime from [1,1] to [3,4] = 3 seconds \nTime from [3,4] to [-1,0] = 4 seconds\nTotal time = 7 seconds</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> points = [[3,2],[-2,2]]\n<strong>Output:</strong> 5\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>points.length == n</code></li>\n\t<li><code>1 &lt;= n&nbsp;&lt;= 100</code></li>\n\t<li><code>points[i].length == 2</code></li>\n\t<li><code>-1000&nbsp;&lt;= points[i][0], points[i][1]&nbsp;&lt;= 1000</code></li>\n</ul>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    int minTimeToVisitAllPoints(vector<vector<int>>& points) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public int minTimeToVisitAllPoints(int[][] points) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def minTimeToVisitAllPoints(self, points):\n        \"\"\"\n        :type points: List[List[int]]\n        :rtype: int\n        \"\"\"\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def minTimeToVisitAllPoints(self, points: List[List[int]]) -> int:\n        "},{"value":"c","text":"C","defaultCode":"int minTimeToVisitAllPoints(int** points, int pointsSize, int* pointsColSize) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public int MinTimeToVisitAllPoints(int[][] points) {\n        \n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number[][]} points\n * @return {number}\n */\nvar minTimeToVisitAllPoints = function(points) {\n    \n};"},{"value":"typescript","text":"TypeScript","defaultCode":"function minTimeToVisitAllPoints(points: number[][]): number {\n    \n};"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n\n    /**\n     * @param Integer[][] $points\n     * @return Integer\n     */\n    function minTimeToVisitAllPoints($points) {\n        \n    }\n}"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func minTimeToVisitAllPoints(_ points: [[Int]]) -> Int {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun minTimeToVisitAllPoints(points: Array<IntArray>): Int {\n        \n    }\n}"},{"value":"dart","text":"Dart","defaultCode":"class Solution {\n  int minTimeToVisitAllPoints(List<List<int>> points) {\n    \n  }\n}"},{"value":"golang","text":"Go","defaultCode":"func minTimeToVisitAllPoints(points [][]int) int {\n    \n}"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[][]} points\n# @return {Integer}\ndef min_time_to_visit_all_points(points)\n    \nend"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def minTimeToVisitAllPoints(points: Array[Array[Int]]): Int = {\n        \n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn min_time_to_visit_all_points(points: Vec<Vec<i32>>) -> i32 {\n        \n    }\n}"},{"value":"racket","text":"Racket","defaultCode":"(define/contract (min-time-to-visit-all-points points)\n  (-> (listof (listof exact-integer?)) exact-integer?)\n  )"},{"value":"erlang","text":"Erlang","defaultCode":"-spec min_time_to_visit_all_points(Points :: [[integer()]]) -> integer().\nmin_time_to_visit_all_points(Points) ->\n  ."},{"value":"elixir","text":"Elixir","defaultCode":"defmodule Solution do\n  @spec min_time_to_visit_all_points(points :: [[integer]]) :: integer\n  def min_time_to_visit_all_points(points) do\n    \n  end\nend"}],"testcase":"[[1,1],[3,4],[-1,0]]","testable":true,"templateMeta":{"name":"minTimeToVisitAllPoints","params":[{"name":"points","type":"integer[][]"}],"return":{"type":"integer"}}}