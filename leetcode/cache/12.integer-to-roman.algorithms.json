{"id":12,"fid":12,"name":"Integer to Roman","slug":"integer-to-roman","link":"https://leetcode.com/problems/integer-to-roman/description/","percent":63.99173970175682,"level":"Medium","category":"algorithms","totalAC":"1.2M","totalSubmit":"1.9M","likes":6800,"dislikes":5476,"desc":"<p>Roman numerals are represented by seven different symbols:&nbsp;<code>I</code>, <code>V</code>, <code>X</code>, <code>L</code>, <code>C</code>, <code>D</code> and <code>M</code>.</p>\n\n<pre>\n<strong>Symbol</strong>       <strong>Value</strong>\nI             1\nV             5\nX             10\nL             50\nC             100\nD             500\nM             1000</pre>\n\n<p>For example,&nbsp;<code>2</code> is written as <code>II</code>&nbsp;in Roman numeral, just two one&#39;s added together. <code>12</code> is written as&nbsp;<code>XII</code>, which is simply <code>X + II</code>. The number <code>27</code> is written as <code>XXVII</code>, which is <code>XX + V + II</code>.</p>\n\n<p>Roman numerals are usually written largest to smallest from left to right. However, the numeral for four is not <code>IIII</code>. Instead, the number four is written as <code>IV</code>. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as <code>IX</code>. There are six instances where subtraction is used:</p>\n\n<ul>\n\t<li><code>I</code> can be placed before <code>V</code> (5) and <code>X</code> (10) to make 4 and 9.&nbsp;</li>\n\t<li><code>X</code> can be placed before <code>L</code> (50) and <code>C</code> (100) to make 40 and 90.&nbsp;</li>\n\t<li><code>C</code> can be placed before <code>D</code> (500) and <code>M</code> (1000) to make 400 and 900.</li>\n</ul>\n\n<p>Given an integer, convert it to a roman numeral.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> num = 3\n<strong>Output:</strong> &quot;III&quot;\n<strong>Explanation:</strong> 3 is represented as 3 ones.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> num = 58\n<strong>Output:</strong> &quot;LVIII&quot;\n<strong>Explanation:</strong> L = 50, V = 5, III = 3.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> num = 1994\n<strong>Output:</strong> &quot;MCMXCIV&quot;\n<strong>Explanation:</strong> M = 1000, CM = 900, XC = 90 and IV = 4.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= num &lt;= 3999</code></li>\n</ul>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    string intToRoman(int num) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public String intToRoman(int num) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def intToRoman(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def intToRoman(self, num: int) -> str:\n        "},{"value":"c","text":"C","defaultCode":"char* intToRoman(int num) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public string IntToRoman(int num) {\n        \n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number} num\n * @return {string}\n */\nvar intToRoman = function(num) {\n    \n};"},{"value":"typescript","text":"TypeScript","defaultCode":"function intToRoman(num: number): string {\n    \n};"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n\n    /**\n     * @param Integer $num\n     * @return String\n     */\n    function intToRoman($num) {\n        \n    }\n}"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func intToRoman(_ num: Int) -> String {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun intToRoman(num: Int): String {\n        \n    }\n}"},{"value":"dart","text":"Dart","defaultCode":"class Solution {\n  String intToRoman(int num) {\n    \n  }\n}"},{"value":"golang","text":"Go","defaultCode":"func intToRoman(num int) string {\n    \n}"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer} num\n# @return {String}\ndef int_to_roman(num)\n    \nend"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def intToRoman(num: Int): String = {\n        \n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn int_to_roman(num: i32) -> String {\n        \n    }\n}"},{"value":"racket","text":"Racket","defaultCode":"(define/contract (int-to-roman num)\n  (-> exact-integer? string?)\n  )"},{"value":"erlang","text":"Erlang","defaultCode":"-spec int_to_roman(Num :: integer()) -> unicode:unicode_binary().\nint_to_roman(Num) ->\n  ."},{"value":"elixir","text":"Elixir","defaultCode":"defmodule Solution do\n  @spec int_to_roman(num :: integer) :: String.t\n  def int_to_roman(num) do\n    \n  end\nend"}],"testcase":"3","testable":true,"templateMeta":{"name":"intToRoman","params":[{"name":"num","type":"integer"}],"return":{"type":"string"}}}