{"id":451,"fid":451,"name":"Sort Characters By Frequency","slug":"sort-characters-by-frequency","link":"https://leetcode.com/problems/sort-characters-by-frequency/description/","percent":70.63536403278916,"level":"Medium","category":"algorithms","totalAC":"572.3K","totalSubmit":"810.1K","likes":7498,"dislikes":246,"desc":"<p>Given a string <code>s</code>, sort it in <strong>decreasing order</strong> based on the <strong>frequency</strong> of the characters. The <strong>frequency</strong> of a character is the number of times it appears in the string.</p>\n\n<p>Return <em>the sorted string</em>. If there are multiple answers, return <em>any of them</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;tree&quot;\n<strong>Output:</strong> &quot;eert&quot;\n<strong>Explanation:</strong> &#39;e&#39; appears twice while &#39;r&#39; and &#39;t&#39; both appear once.\nSo &#39;e&#39; must appear before both &#39;r&#39; and &#39;t&#39;. Therefore &quot;eetr&quot; is also a valid answer.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;cccaaa&quot;\n<strong>Output:</strong> &quot;aaaccc&quot;\n<strong>Explanation:</strong> Both &#39;c&#39; and &#39;a&#39; appear three times, so both &quot;cccaaa&quot; and &quot;aaaccc&quot; are valid answers.\nNote that &quot;cacaca&quot; is incorrect, as the same characters must be together.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;Aabb&quot;\n<strong>Output:</strong> &quot;bbAa&quot;\n<strong>Explanation:</strong> &quot;bbaA&quot; is also a valid answer, but &quot;Aabb&quot; is incorrect.\nNote that &#39;A&#39; and &#39;a&#39; are treated as two different characters.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 5 * 10<sup>5</sup></code></li>\n\t<li><code>s</code> consists of uppercase and lowercase English letters and digits.</li>\n</ul>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    string frequencySort(string s) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public String frequencySort(String s) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def frequencySort(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def frequencySort(self, s: str) -> str:\n        "},{"value":"c","text":"C","defaultCode":"char* frequencySort(char* s) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public string FrequencySort(string s) {\n        \n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {string} s\n * @return {string}\n */\nvar frequencySort = function(s) {\n    \n};"},{"value":"typescript","text":"TypeScript","defaultCode":"function frequencySort(s: string): string {\n    \n};"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n\n    /**\n     * @param String $s\n     * @return String\n     */\n    function frequencySort($s) {\n        \n    }\n}"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func frequencySort(_ s: String) -> String {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun frequencySort(s: String): String {\n        \n    }\n}"},{"value":"dart","text":"Dart","defaultCode":"class Solution {\n  String frequencySort(String s) {\n    \n  }\n}"},{"value":"golang","text":"Go","defaultCode":"func frequencySort(s string) string {\n    \n}"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {String} s\n# @return {String}\ndef frequency_sort(s)\n    \nend"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def frequencySort(s: String): String = {\n        \n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn frequency_sort(s: String) -> String {\n        \n    }\n}"},{"value":"racket","text":"Racket","defaultCode":"(define/contract (frequency-sort s)\n  (-> string? string?)\n  )"},{"value":"erlang","text":"Erlang","defaultCode":"-spec frequency_sort(S :: unicode:unicode_binary()) -> unicode:unicode_binary().\nfrequency_sort(S) ->\n  ."},{"value":"elixir","text":"Elixir","defaultCode":"defmodule Solution do\n  @spec frequency_sort(s :: String.t) :: String.t\n  def frequency_sort(s) do\n    \n  end\nend"}],"testcase":"\"tree\"","testable":true,"templateMeta":{"name":"frequencySort","params":[{"name":"s","type":"string"}],"return":{"type":"string"}}}