{"id":473,"fid":473,"name":"Matchsticks to Square","slug":"matchsticks-to-square","link":"https://leetcode.com/problems/matchsticks-to-square/description/","percent":40.194179229373574,"level":"Medium","category":"algorithms","totalAC":"157.4K","totalSubmit":"391.5K","likes":3738,"dislikes":287,"desc":"<p>You are given an integer array <code>matchsticks</code> where <code>matchsticks[i]</code> is the length of the <code>i<sup>th</sup></code> matchstick. You want to use <strong>all the matchsticks</strong> to make one square. You <strong>should not break</strong> any stick, but you can link them up, and each matchstick must be used <strong>exactly one time</strong>.</p>\n\n<p>Return <code>true</code> if you can make this square and <code>false</code> otherwise.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/04/09/matchsticks1-grid.jpg\" style=\"width: 253px; height: 253px;\" />\n<pre>\n<strong>Input:</strong> matchsticks = [1,1,2,2,2]\n<strong>Output:</strong> true\n<strong>Explanation:</strong> You can form a square with length 2, one side of the square came two sticks with length 1.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> matchsticks = [3,3,3,3,4]\n<strong>Output:</strong> false\n<strong>Explanation:</strong> You cannot find a way to form a square with all the matchsticks.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= matchsticks.length &lt;= 15</code></li>\n\t<li><code>1 &lt;= matchsticks[i] &lt;= 10<sup>8</sup></code></li>\n</ul>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    bool makesquare(vector<int>& matchsticks) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public boolean makesquare(int[] matchsticks) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def makesquare(self, matchsticks):\n        \"\"\"\n        :type matchsticks: List[int]\n        :rtype: bool\n        \"\"\"\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def makesquare(self, matchsticks: List[int]) -> bool:\n        "},{"value":"c","text":"C","defaultCode":"bool makesquare(int* matchsticks, int matchsticksSize) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public bool Makesquare(int[] matchsticks) {\n        \n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number[]} matchsticks\n * @return {boolean}\n */\nvar makesquare = function(matchsticks) {\n    \n};"},{"value":"typescript","text":"TypeScript","defaultCode":"function makesquare(matchsticks: number[]): boolean {\n    \n};"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n\n    /**\n     * @param Integer[] $matchsticks\n     * @return Boolean\n     */\n    function makesquare($matchsticks) {\n        \n    }\n}"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func makesquare(_ matchsticks: [Int]) -> Bool {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun makesquare(matchsticks: IntArray): Boolean {\n        \n    }\n}"},{"value":"dart","text":"Dart","defaultCode":"class Solution {\n  bool makesquare(List<int> matchsticks) {\n    \n  }\n}"},{"value":"golang","text":"Go","defaultCode":"func makesquare(matchsticks []int) bool {\n    \n}"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[]} matchsticks\n# @return {Boolean}\ndef makesquare(matchsticks)\n    \nend"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def makesquare(matchsticks: Array[Int]): Boolean = {\n        \n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn makesquare(matchsticks: Vec<i32>) -> bool {\n        \n    }\n}"},{"value":"racket","text":"Racket","defaultCode":"(define/contract (makesquare matchsticks)\n  (-> (listof exact-integer?) boolean?)\n  )"},{"value":"erlang","text":"Erlang","defaultCode":"-spec makesquare(Matchsticks :: [integer()]) -> boolean().\nmakesquare(Matchsticks) ->\n  ."},{"value":"elixir","text":"Elixir","defaultCode":"defmodule Solution do\n  @spec makesquare(matchsticks :: [integer]) :: boolean\n  def makesquare(matchsticks) do\n    \n  end\nend"}],"testcase":"[1,1,2,2,2]","testable":true,"templateMeta":{"name":"makesquare","params":[{"name":"matchsticks","type":"integer[]"}],"return":{"type":"boolean"}}}