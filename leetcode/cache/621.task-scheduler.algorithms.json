{"id":621,"fid":621,"name":"Task Scheduler","slug":"task-scheduler","link":"https://leetcode.com/problems/task-scheduler/description/","percent":58.010671007626655,"level":"Medium","category":"algorithms","totalAC":"497.9K","totalSubmit":"857.9K","likes":9282,"dislikes":1929,"desc":"<p>Given a characters array <code>tasks</code>, representing the tasks a CPU needs to do, where each letter represents a different task. Tasks could be done in any order. Each task is done in one unit of time. For each unit of time, the CPU could complete either one task or just be idle.</p>\n\n<p>However, there is a non-negative integer&nbsp;<code>n</code> that represents the cooldown period between&nbsp;two <b>same tasks</b>&nbsp;(the same letter in the array), that is that there must be at least <code>n</code> units of time between any two same tasks.</p>\n\n<p>Return <em>the least number of units of times that the CPU will take to finish all the given tasks</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> tasks = [&quot;A&quot;,&quot;A&quot;,&quot;A&quot;,&quot;B&quot;,&quot;B&quot;,&quot;B&quot;], n = 2\n<strong>Output:</strong> 8\n<strong>Explanation:</strong> \nA -&gt; B -&gt; idle -&gt; A -&gt; B -&gt; idle -&gt; A -&gt; B\nThere is at least 2 units of time between any two same tasks.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> tasks = [&quot;A&quot;,&quot;A&quot;,&quot;A&quot;,&quot;B&quot;,&quot;B&quot;,&quot;B&quot;], n = 0\n<strong>Output:</strong> 6\n<strong>Explanation:</strong> On this case any permutation of size 6 would work since n = 0.\n[&quot;A&quot;,&quot;A&quot;,&quot;A&quot;,&quot;B&quot;,&quot;B&quot;,&quot;B&quot;]\n[&quot;A&quot;,&quot;B&quot;,&quot;A&quot;,&quot;B&quot;,&quot;A&quot;,&quot;B&quot;]\n[&quot;B&quot;,&quot;B&quot;,&quot;B&quot;,&quot;A&quot;,&quot;A&quot;,&quot;A&quot;]\n...\nAnd so on.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> tasks = [&quot;A&quot;,&quot;A&quot;,&quot;A&quot;,&quot;A&quot;,&quot;A&quot;,&quot;A&quot;,&quot;B&quot;,&quot;C&quot;,&quot;D&quot;,&quot;E&quot;,&quot;F&quot;,&quot;G&quot;], n = 2\n<strong>Output:</strong> 16\n<strong>Explanation:</strong> \nOne possible solution is\nA -&gt; B -&gt; C -&gt; A -&gt; D -&gt; E -&gt; A -&gt; F -&gt; G -&gt; A -&gt; idle -&gt; idle -&gt; A -&gt; idle -&gt; idle -&gt; A\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= task.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>tasks[i]</code> is upper-case English letter.</li>\n\t<li>The integer <code>n</code> is in the range <code>[0, 100]</code>.</li>\n</ul>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    int leastInterval(vector<char>& tasks, int n) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public int leastInterval(char[] tasks, int n) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def leastInterval(self, tasks, n):\n        \"\"\"\n        :type tasks: List[str]\n        :type n: int\n        :rtype: int\n        \"\"\"\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def leastInterval(self, tasks: List[str], n: int) -> int:\n        "},{"value":"c","text":"C","defaultCode":"int leastInterval(char* tasks, int tasksSize, int n) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public int LeastInterval(char[] tasks, int n) {\n        \n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {character[]} tasks\n * @param {number} n\n * @return {number}\n */\nvar leastInterval = function(tasks, n) {\n    \n};"},{"value":"typescript","text":"TypeScript","defaultCode":"function leastInterval(tasks: string[], n: number): number {\n    \n};"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n\n    /**\n     * @param String[] $tasks\n     * @param Integer $n\n     * @return Integer\n     */\n    function leastInterval($tasks, $n) {\n        \n    }\n}"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func leastInterval(_ tasks: [Character], _ n: Int) -> Int {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun leastInterval(tasks: CharArray, n: Int): Int {\n        \n    }\n}"},{"value":"dart","text":"Dart","defaultCode":"class Solution {\n  int leastInterval(List<String> tasks, int n) {\n    \n  }\n}"},{"value":"golang","text":"Go","defaultCode":"func leastInterval(tasks []byte, n int) int {\n    \n}"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Character[]} tasks\n# @param {Integer} n\n# @return {Integer}\ndef least_interval(tasks, n)\n    \nend"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def leastInterval(tasks: Array[Char], n: Int): Int = {\n        \n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn least_interval(tasks: Vec<char>, n: i32) -> i32 {\n        \n    }\n}"},{"value":"racket","text":"Racket","defaultCode":"(define/contract (least-interval tasks n)\n  (-> (listof char?) exact-integer? exact-integer?)\n  )"},{"value":"erlang","text":"Erlang","defaultCode":"-spec least_interval(Tasks :: [char()], N :: integer()) -> integer().\nleast_interval(Tasks, N) ->\n  ."},{"value":"elixir","text":"Elixir","defaultCode":"defmodule Solution do\n  @spec least_interval(tasks :: [char], n :: integer) :: integer\n  def least_interval(tasks, n) do\n    \n  end\nend"}],"testcase":"[\"A\",\"A\",\"A\",\"B\",\"B\",\"B\"]\n2","testable":true,"templateMeta":{"name":"leastInterval","params":[{"name":"tasks","type":"character[]"},{"name":"n","type":"integer"}],"return":{"type":"integer"}}}