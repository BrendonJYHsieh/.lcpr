{"id":1115,"fid":1037,"name":"Valid Boomerang","slug":"valid-boomerang","link":"https://leetcode.com/problems/valid-boomerang/description/","percent":36.899953601229186,"level":"Easy","category":"algorithms","totalAC":"48.6K","totalSubmit":"131.6K","likes":398,"dislikes":515,"desc":"<p>Given an array <code>points</code> where <code>points[i] = [x<sub>i</sub>, y<sub>i</sub>]</code> represents a point on the <strong>X-Y</strong> plane, return <code>true</code> <em>if these points are a <strong>boomerang</strong></em>.</p>\n\n<p>A <strong>boomerang</strong> is a set of three points that are <strong>all distinct</strong> and <strong>not in a straight line</strong>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<pre><strong>Input:</strong> points = [[1,1],[2,3],[3,2]]\n<strong>Output:</strong> true\n</pre><p><strong class=\"example\">Example 2:</strong></p>\n<pre><strong>Input:</strong> points = [[1,1],[2,2],[3,3]]\n<strong>Output:</strong> false\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>points.length == 3</code></li>\n\t<li><code>points[i].length == 2</code></li>\n\t<li><code>0 &lt;= x<sub>i</sub>, y<sub>i</sub> &lt;= 100</code></li>\n</ul>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    bool isBoomerang(vector<vector<int>>& points) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public boolean isBoomerang(int[][] points) {\n        \n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def isBoomerang(self, points):\n        \"\"\"\n        :type points: List[List[int]]\n        :rtype: bool\n        \"\"\"\n        "},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def isBoomerang(self, points: List[List[int]]) -> bool:\n        "},{"value":"c","text":"C","defaultCode":"bool isBoomerang(int** points, int pointsSize, int* pointsColSize) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public bool IsBoomerang(int[][] points) {\n        \n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number[][]} points\n * @return {boolean}\n */\nvar isBoomerang = function(points) {\n    \n};"},{"value":"typescript","text":"TypeScript","defaultCode":"function isBoomerang(points: number[][]): boolean {\n    \n};"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n\n    /**\n     * @param Integer[][] $points\n     * @return Boolean\n     */\n    function isBoomerang($points) {\n        \n    }\n}"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func isBoomerang(_ points: [[Int]]) -> Bool {\n        \n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun isBoomerang(points: Array<IntArray>): Boolean {\n        \n    }\n}"},{"value":"dart","text":"Dart","defaultCode":"class Solution {\n  bool isBoomerang(List<List<int>> points) {\n    \n  }\n}"},{"value":"golang","text":"Go","defaultCode":"func isBoomerang(points [][]int) bool {\n    \n}"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[][]} points\n# @return {Boolean}\ndef is_boomerang(points)\n    \nend"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def isBoomerang(points: Array[Array[Int]]): Boolean = {\n        \n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn is_boomerang(points: Vec<Vec<i32>>) -> bool {\n        \n    }\n}"},{"value":"racket","text":"Racket","defaultCode":"(define/contract (is-boomerang points)\n  (-> (listof (listof exact-integer?)) boolean?)\n  )"},{"value":"erlang","text":"Erlang","defaultCode":"-spec is_boomerang(Points :: [[integer()]]) -> boolean().\nis_boomerang(Points) ->\n  ."},{"value":"elixir","text":"Elixir","defaultCode":"defmodule Solution do\n  @spec is_boomerang(points :: [[integer]]) :: boolean\n  def is_boomerang(points) do\n    \n  end\nend"}],"testcase":"[[1,1],[2,3],[3,2]]","testable":true,"templateMeta":{"name":"isBoomerang","params":[{"name":"points","type":"integer[][]"}],"return":{"type":"boolean"}}}